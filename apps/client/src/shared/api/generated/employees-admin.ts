/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * Employees Admin
 * The Employees Admin API description
 * OpenAPI spec version: 0.1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { createApiInstance } from './api-instance';
import type { BodyType, ErrorType } from './api-instance';

export interface ExistedAccountResponseDto {
  existed: boolean;
}

export interface HasAccountDto {
  email: string;
}

export interface RegisterExistedDto {
  email: string;
  password: string;
}

export type RegisterDtoRole =
  (typeof RegisterDtoRole)[keyof typeof RegisterDtoRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RegisterDtoRole = {
  USER: 'USER',
  ADMIN: 'ADMIN',
} as const;

export interface RegisterDto {
  /** –°—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO */
  dateOfBirth?: string;
  departamentId: number;
  email: string;
  firstname: string;
  jobTitleId: number;
  lastname: string;
  password?: string;
  patronymic?: string;
  phone: string;
  role?: RegisterDtoRole;
}

export interface LoginDto {
  email: string;
  password: string;
}

export interface UpdateJobTitleDto {
  /** @nullable */
  departamentId?: number | null;
  id?: number;
  name?: string;
}

export interface CreateJobTitleDto {
  /** @nullable */
  departamentId?: number | null;
  name: string;
}

export interface UpdateDepartmentDto {
  id: number;
  jobTitles?: number[];
  name: string;
}

export interface CreateDepartmentDto {
  jobTitles?: number[];
  name: string;
}

export interface JobTitleEntity {
  /** @nullable */
  departamentId: number | null;
  id: number;
  name: string;
}

export interface DepartmentEntity {
  id: number;
  jobTitles?: JobTitleEntity[];
  name: string;
}

export type UpdateWorkerDtoRole =
  (typeof UpdateWorkerDtoRole)[keyof typeof UpdateWorkerDtoRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateWorkerDtoRole = {
  USER: 'USER',
  ADMIN: 'ADMIN',
} as const;

export interface UpdateWorkerDto {
  /** –°—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO */
  dateOfBirth?: string;
  departamentId?: number;
  email?: string;
  firstname?: string;
  id: number;
  jobTitleId?: number;
  lastname?: string;
  password?: string;
  patronymic?: string;
  phone?: string;
  role?: UpdateWorkerDtoRole;
}

export type GetWorkerDtoOrderedBy =
  (typeof GetWorkerDtoOrderedBy)[keyof typeof GetWorkerDtoOrderedBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetWorkerDtoOrderedBy = {
  id: 'id',
  firstname: 'firstname',
  lastname: 'lastname',
  patronymic: 'patronymic',
  phone: 'phone',
  dateOfEmployed: 'dateOfEmployed',
  dateOfBirth: 'dateOfBirth',
  dateOfLayoffs: 'dateOfLayoffs',
} as const;

export type GetWorkerDtoDirection =
  (typeof GetWorkerDtoDirection)[keyof typeof GetWorkerDtoDirection];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetWorkerDtoDirection = {
  asc: 'asc',
  desc: 'desc',
} as const;

export interface PagingOptions {
  page: number;
  size: number;
}

export interface GetWorkerDto {
  direction?: GetWorkerDtoDirection;
  orderedBy?: GetWorkerDtoOrderedBy;
  paging?: PagingOptions;
  search?: SearchWorkerEntity;
}

export type PartialTypeClassRole =
  (typeof PartialTypeClassRole)[keyof typeof PartialTypeClassRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PartialTypeClassRole = {
  USER: 'USER',
  ADMIN: 'ADMIN',
} as const;

export interface PartialTypeClass {
  email?: string;
  id?: number;
  role?: PartialTypeClassRole;
}

export interface SearchWorkerEntity {
  account?: PartialTypeClass;
  dateOfBirth?: string;
  dateOfEmployed?: string;
  dateOfLayoffs?: string;
  departamentId?: number;
  firstname?: string;
  jobTitleId?: number;
  lastname?: string;
  patronymic?: string;
  phone?: string;
}

export type ErrorDtoMessage = string | string[];

export interface ErrorDto {
  error: string;
  message: ErrorDtoMessage;
  statusCode: number;
}

export type AccountInWorkerRole =
  (typeof AccountInWorkerRole)[keyof typeof AccountInWorkerRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountInWorkerRole = {
  USER: 'USER',
  ADMIN: 'ADMIN',
} as const;

export interface AccountInWorker {
  email: string;
  id: number;
  role: AccountInWorkerRole;
}

export interface OmitTypeClass {
  id: number;
  name: string;
}

export interface WorkerResponseDto {
  account: AccountInWorker;
  dateOfBirth?: string;
  dateOfEmployed: string;
  dateOfLayoffs?: string;
  department: OmitTypeClass;
  firstname: string;
  id: number;
  image?: string;
  jobTitle: OmitTypeClass;
  lastname: string;
  patronymic?: string;
  phone: string;
}

export type CreateWorkerDtoRole =
  (typeof CreateWorkerDtoRole)[keyof typeof CreateWorkerDtoRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateWorkerDtoRole = {
  USER: 'USER',
  ADMIN: 'ADMIN',
} as const;

export interface CreateWorkerDto {
  /** –°—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO */
  dateOfBirth?: string;
  departamentId: number;
  email: string;
  firstname: string;
  jobTitleId: number;
  lastname: string;
  password?: string;
  patronymic?: string;
  phone: string;
  role?: CreateWorkerDtoRole;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const workersControllerCreate = (
  createWorkerDto: BodyType<CreateWorkerDto>,
  options?: SecondParameter<typeof createApiInstance>,
) => {
  return createApiInstance<WorkerResponseDto>(
    {
      url: `/api/workers`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createWorkerDto,
    },
    options,
  );
};

export const getWorkersControllerCreateMutationOptions = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workersControllerCreate>>,
    TError,
    { data: BodyType<CreateWorkerDto> },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof workersControllerCreate>>,
  TError,
  { data: BodyType<CreateWorkerDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof workersControllerCreate>>,
    { data: BodyType<CreateWorkerDto> }
  > = (props) => {
    const { data } = props ?? {};

    return workersControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type WorkersControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof workersControllerCreate>>
>;
export type WorkersControllerCreateMutationBody = BodyType<CreateWorkerDto>;
export type WorkersControllerCreateMutationError = ErrorType<ErrorDto>;

export const useWorkersControllerCreate = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workersControllerCreate>>,
    TError,
    { data: BodyType<CreateWorkerDto> },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof workersControllerCreate>>,
  TError,
  { data: BodyType<CreateWorkerDto> },
  TContext
> => {
  const mutationOptions = getWorkersControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const workersControllerUpdate = (
  updateWorkerDto: BodyType<UpdateWorkerDto>,
  options?: SecondParameter<typeof createApiInstance>,
) => {
  return createApiInstance<WorkerResponseDto>(
    {
      url: `/api/workers`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateWorkerDto,
    },
    options,
  );
};

export const getWorkersControllerUpdateMutationOptions = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workersControllerUpdate>>,
    TError,
    { data: BodyType<UpdateWorkerDto> },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof workersControllerUpdate>>,
  TError,
  { data: BodyType<UpdateWorkerDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof workersControllerUpdate>>,
    { data: BodyType<UpdateWorkerDto> }
  > = (props) => {
    const { data } = props ?? {};

    return workersControllerUpdate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type WorkersControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof workersControllerUpdate>>
>;
export type WorkersControllerUpdateMutationBody = BodyType<UpdateWorkerDto>;
export type WorkersControllerUpdateMutationError = ErrorType<ErrorDto>;

export const useWorkersControllerUpdate = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workersControllerUpdate>>,
    TError,
    { data: BodyType<UpdateWorkerDto> },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof workersControllerUpdate>>,
  TError,
  { data: BodyType<UpdateWorkerDto> },
  TContext
> => {
  const mutationOptions = getWorkersControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const workersControllerFindAll = (
  getWorkerDto?: BodyType<GetWorkerDto>,
  options?: SecondParameter<typeof createApiInstance>,
) => {
  return createApiInstance<WorkerResponseDto[]>(
    {
      url: `/api/workers/read`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: getWorkerDto,
    },
    options,
  );
};

export const getWorkersControllerFindAllMutationOptions = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workersControllerFindAll>>,
    TError,
    { data: BodyType<GetWorkerDto> },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof workersControllerFindAll>>,
  TError,
  { data: BodyType<GetWorkerDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof workersControllerFindAll>>,
    { data: BodyType<GetWorkerDto> }
  > = (props) => {
    const { data } = props ?? {};

    return workersControllerFindAll(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type WorkersControllerFindAllMutationResult = NonNullable<
  Awaited<ReturnType<typeof workersControllerFindAll>>
>;
export type WorkersControllerFindAllMutationBody = BodyType<GetWorkerDto>;
export type WorkersControllerFindAllMutationError = ErrorType<ErrorDto>;

export const useWorkersControllerFindAll = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workersControllerFindAll>>,
    TError,
    { data: BodyType<GetWorkerDto> },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof workersControllerFindAll>>,
  TError,
  { data: BodyType<GetWorkerDto> },
  TContext
> => {
  const mutationOptions = getWorkersControllerFindAllMutationOptions(options);

  return useMutation(mutationOptions);
};

export const workersControllerFindOne = (
  id: number,
  options?: SecondParameter<typeof createApiInstance>,
  signal?: AbortSignal,
) => {
  return createApiInstance<WorkerResponseDto>(
    { url: `/api/workers/${id}`, method: 'GET', signal },
    options,
  );
};

export const getWorkersControllerFindOneQueryKey = (id: number) => {
  return [`/api/workers/${id}`] as const;
};

export const getWorkersControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof workersControllerFindOne>>,
  TError = ErrorType<ErrorDto>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workersControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createApiInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getWorkersControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof workersControllerFindOne>>
  > = ({ signal }) => workersControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof workersControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type WorkersControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof workersControllerFindOne>>
>;
export type WorkersControllerFindOneQueryError = ErrorType<ErrorDto>;

export const useWorkersControllerFindOne = <
  TData = Awaited<ReturnType<typeof workersControllerFindOne>>,
  TError = ErrorType<ErrorDto>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof workersControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createApiInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getWorkersControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const workersControllerRemove = (
  id: number,
  options?: SecondParameter<typeof createApiInstance>,
) => {
  return createApiInstance<WorkerResponseDto>(
    { url: `/api/workers/${id}`, method: 'DELETE' },
    options,
  );
};

export const getWorkersControllerRemoveMutationOptions = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workersControllerRemove>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof workersControllerRemove>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof workersControllerRemove>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return workersControllerRemove(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type WorkersControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof workersControllerRemove>>
>;

export type WorkersControllerRemoveMutationError = ErrorType<ErrorDto>;

export const useWorkersControllerRemove = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workersControllerRemove>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof workersControllerRemove>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getWorkersControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};

export const departmentsControllerFindAll = (
  options?: SecondParameter<typeof createApiInstance>,
  signal?: AbortSignal,
) => {
  return createApiInstance<DepartmentEntity[]>(
    { url: `/api/departments`, method: 'GET', signal },
    options,
  );
};

export const getDepartmentsControllerFindAllQueryKey = () => {
  return [`/api/departments`] as const;
};

export const getDepartmentsControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof departmentsControllerFindAll>>,
  TError = ErrorType<ErrorDto>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof departmentsControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof createApiInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getDepartmentsControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof departmentsControllerFindAll>>
  > = ({ signal }) => departmentsControllerFindAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof departmentsControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type DepartmentsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof departmentsControllerFindAll>>
>;
export type DepartmentsControllerFindAllQueryError = ErrorType<ErrorDto>;

export const useDepartmentsControllerFindAll = <
  TData = Awaited<ReturnType<typeof departmentsControllerFindAll>>,
  TError = ErrorType<ErrorDto>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof departmentsControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getDepartmentsControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const departmentsControllerCreate = (
  createDepartmentDto: BodyType<CreateDepartmentDto>,
  options?: SecondParameter<typeof createApiInstance>,
) => {
  return createApiInstance<DepartmentEntity>(
    {
      url: `/api/departments`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createDepartmentDto,
    },
    options,
  );
};

export const getDepartmentsControllerCreateMutationOptions = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof departmentsControllerCreate>>,
    TError,
    { data: BodyType<CreateDepartmentDto> },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof departmentsControllerCreate>>,
  TError,
  { data: BodyType<CreateDepartmentDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof departmentsControllerCreate>>,
    { data: BodyType<CreateDepartmentDto> }
  > = (props) => {
    const { data } = props ?? {};

    return departmentsControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DepartmentsControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof departmentsControllerCreate>>
>;
export type DepartmentsControllerCreateMutationBody =
  BodyType<CreateDepartmentDto>;
export type DepartmentsControllerCreateMutationError = ErrorType<ErrorDto>;

export const useDepartmentsControllerCreate = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof departmentsControllerCreate>>,
    TError,
    { data: BodyType<CreateDepartmentDto> },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof departmentsControllerCreate>>,
  TError,
  { data: BodyType<CreateDepartmentDto> },
  TContext
> => {
  const mutationOptions =
    getDepartmentsControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const departmentsControllerUpdate = (
  updateDepartmentDto: BodyType<UpdateDepartmentDto>,
  options?: SecondParameter<typeof createApiInstance>,
) => {
  return createApiInstance<DepartmentEntity>(
    {
      url: `/api/departments`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateDepartmentDto,
    },
    options,
  );
};

export const getDepartmentsControllerUpdateMutationOptions = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof departmentsControllerUpdate>>,
    TError,
    { data: BodyType<UpdateDepartmentDto> },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof departmentsControllerUpdate>>,
  TError,
  { data: BodyType<UpdateDepartmentDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof departmentsControllerUpdate>>,
    { data: BodyType<UpdateDepartmentDto> }
  > = (props) => {
    const { data } = props ?? {};

    return departmentsControllerUpdate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DepartmentsControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof departmentsControllerUpdate>>
>;
export type DepartmentsControllerUpdateMutationBody =
  BodyType<UpdateDepartmentDto>;
export type DepartmentsControllerUpdateMutationError = ErrorType<ErrorDto>;

export const useDepartmentsControllerUpdate = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof departmentsControllerUpdate>>,
    TError,
    { data: BodyType<UpdateDepartmentDto> },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof departmentsControllerUpdate>>,
  TError,
  { data: BodyType<UpdateDepartmentDto> },
  TContext
> => {
  const mutationOptions =
    getDepartmentsControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const departmentsControllerFindOne = (
  id: number,
  options?: SecondParameter<typeof createApiInstance>,
  signal?: AbortSignal,
) => {
  return createApiInstance<DepartmentEntity>(
    { url: `/api/departments/${id}`, method: 'GET', signal },
    options,
  );
};

export const getDepartmentsControllerFindOneQueryKey = (id: number) => {
  return [`/api/departments/${id}`] as const;
};

export const getDepartmentsControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof departmentsControllerFindOne>>,
  TError = ErrorType<ErrorDto>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof departmentsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createApiInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getDepartmentsControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof departmentsControllerFindOne>>
  > = ({ signal }) => departmentsControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof departmentsControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type DepartmentsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof departmentsControllerFindOne>>
>;
export type DepartmentsControllerFindOneQueryError = ErrorType<ErrorDto>;

export const useDepartmentsControllerFindOne = <
  TData = Awaited<ReturnType<typeof departmentsControllerFindOne>>,
  TError = ErrorType<ErrorDto>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof departmentsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createApiInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getDepartmentsControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const departmentsControllerRemove = (
  id: number,
  options?: SecondParameter<typeof createApiInstance>,
) => {
  return createApiInstance<DepartmentEntity>(
    { url: `/api/departments/${id}`, method: 'DELETE' },
    options,
  );
};

export const getDepartmentsControllerRemoveMutationOptions = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof departmentsControllerRemove>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof departmentsControllerRemove>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof departmentsControllerRemove>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return departmentsControllerRemove(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DepartmentsControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof departmentsControllerRemove>>
>;

export type DepartmentsControllerRemoveMutationError = ErrorType<ErrorDto>;

export const useDepartmentsControllerRemove = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof departmentsControllerRemove>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof departmentsControllerRemove>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getDepartmentsControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};

export const jobTitlesControllerCreate = (
  createJobTitleDto: BodyType<CreateJobTitleDto>,
  options?: SecondParameter<typeof createApiInstance>,
) => {
  return createApiInstance<JobTitleEntity>(
    {
      url: `/api/job-titles`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createJobTitleDto,
    },
    options,
  );
};

export const getJobTitlesControllerCreateMutationOptions = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof jobTitlesControllerCreate>>,
    TError,
    { data: BodyType<CreateJobTitleDto> },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof jobTitlesControllerCreate>>,
  TError,
  { data: BodyType<CreateJobTitleDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof jobTitlesControllerCreate>>,
    { data: BodyType<CreateJobTitleDto> }
  > = (props) => {
    const { data } = props ?? {};

    return jobTitlesControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type JobTitlesControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof jobTitlesControllerCreate>>
>;
export type JobTitlesControllerCreateMutationBody = BodyType<CreateJobTitleDto>;
export type JobTitlesControllerCreateMutationError = ErrorType<ErrorDto>;

export const useJobTitlesControllerCreate = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof jobTitlesControllerCreate>>,
    TError,
    { data: BodyType<CreateJobTitleDto> },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof jobTitlesControllerCreate>>,
  TError,
  { data: BodyType<CreateJobTitleDto> },
  TContext
> => {
  const mutationOptions = getJobTitlesControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const jobTitlesControllerFindAll = (
  options?: SecondParameter<typeof createApiInstance>,
  signal?: AbortSignal,
) => {
  return createApiInstance<JobTitleEntity[]>(
    { url: `/api/job-titles`, method: 'GET', signal },
    options,
  );
};

export const getJobTitlesControllerFindAllQueryKey = () => {
  return [`/api/job-titles`] as const;
};

export const getJobTitlesControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof jobTitlesControllerFindAll>>,
  TError = ErrorType<ErrorDto>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof jobTitlesControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof createApiInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getJobTitlesControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof jobTitlesControllerFindAll>>
  > = ({ signal }) => jobTitlesControllerFindAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof jobTitlesControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type JobTitlesControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof jobTitlesControllerFindAll>>
>;
export type JobTitlesControllerFindAllQueryError = ErrorType<ErrorDto>;

export const useJobTitlesControllerFindAll = <
  TData = Awaited<ReturnType<typeof jobTitlesControllerFindAll>>,
  TError = ErrorType<ErrorDto>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof jobTitlesControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getJobTitlesControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const jobTitlesControllerUpdate = (
  updateJobTitleDto: BodyType<UpdateJobTitleDto>,
  options?: SecondParameter<typeof createApiInstance>,
) => {
  return createApiInstance<JobTitleEntity>(
    {
      url: `/api/job-titles`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateJobTitleDto,
    },
    options,
  );
};

export const getJobTitlesControllerUpdateMutationOptions = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof jobTitlesControllerUpdate>>,
    TError,
    { data: BodyType<UpdateJobTitleDto> },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof jobTitlesControllerUpdate>>,
  TError,
  { data: BodyType<UpdateJobTitleDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof jobTitlesControllerUpdate>>,
    { data: BodyType<UpdateJobTitleDto> }
  > = (props) => {
    const { data } = props ?? {};

    return jobTitlesControllerUpdate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type JobTitlesControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof jobTitlesControllerUpdate>>
>;
export type JobTitlesControllerUpdateMutationBody = BodyType<UpdateJobTitleDto>;
export type JobTitlesControllerUpdateMutationError = ErrorType<ErrorDto>;

export const useJobTitlesControllerUpdate = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof jobTitlesControllerUpdate>>,
    TError,
    { data: BodyType<UpdateJobTitleDto> },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof jobTitlesControllerUpdate>>,
  TError,
  { data: BodyType<UpdateJobTitleDto> },
  TContext
> => {
  const mutationOptions = getJobTitlesControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const jobTitlesControllerFindOne = (
  id: number,
  options?: SecondParameter<typeof createApiInstance>,
  signal?: AbortSignal,
) => {
  return createApiInstance<JobTitleEntity>(
    { url: `/api/job-titles/${id}`, method: 'GET', signal },
    options,
  );
};

export const getJobTitlesControllerFindOneQueryKey = (id: number) => {
  return [`/api/job-titles/${id}`] as const;
};

export const getJobTitlesControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof jobTitlesControllerFindOne>>,
  TError = ErrorType<ErrorDto>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobTitlesControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createApiInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getJobTitlesControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof jobTitlesControllerFindOne>>
  > = ({ signal }) => jobTitlesControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof jobTitlesControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type JobTitlesControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof jobTitlesControllerFindOne>>
>;
export type JobTitlesControllerFindOneQueryError = ErrorType<ErrorDto>;

export const useJobTitlesControllerFindOne = <
  TData = Awaited<ReturnType<typeof jobTitlesControllerFindOne>>,
  TError = ErrorType<ErrorDto>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof jobTitlesControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof createApiInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getJobTitlesControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const jobTitlesControllerRemove = (
  id: number,
  options?: SecondParameter<typeof createApiInstance>,
) => {
  return createApiInstance<JobTitleEntity>(
    { url: `/api/job-titles/${id}`, method: 'DELETE' },
    options,
  );
};

export const getJobTitlesControllerRemoveMutationOptions = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof jobTitlesControllerRemove>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof jobTitlesControllerRemove>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof jobTitlesControllerRemove>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return jobTitlesControllerRemove(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type JobTitlesControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof jobTitlesControllerRemove>>
>;

export type JobTitlesControllerRemoveMutationError = ErrorType<ErrorDto>;

export const useJobTitlesControllerRemove = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof jobTitlesControllerRemove>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof jobTitlesControllerRemove>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getJobTitlesControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};

export const authControllerLogin = (
  loginDto: BodyType<LoginDto>,
  options?: SecondParameter<typeof createApiInstance>,
) => {
  return createApiInstance<WorkerResponseDto>(
    {
      url: `/api/auth/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: loginDto,
    },
    options,
  );
};

export const getAuthControllerLoginMutationOptions = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: BodyType<LoginDto> },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: BodyType<LoginDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogin>>,
    { data: BodyType<LoginDto> }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogin>>
>;
export type AuthControllerLoginMutationBody = BodyType<LoginDto>;
export type AuthControllerLoginMutationError = ErrorType<ErrorDto>;

export const useAuthControllerLogin = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: BodyType<LoginDto> },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: BodyType<LoginDto> },
  TContext
> => {
  const mutationOptions = getAuthControllerLoginMutationOptions(options);

  return useMutation(mutationOptions);
};

export const authControllerAccount = (
  options?: SecondParameter<typeof createApiInstance>,
  signal?: AbortSignal,
) => {
  return createApiInstance<WorkerResponseDto>(
    { url: `/api/auth/account`, method: 'GET', signal },
    options,
  );
};

export const getAuthControllerAccountQueryKey = () => {
  return [`/api/auth/account`] as const;
};

export const getAuthControllerAccountQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerAccount>>,
  TError = ErrorType<ErrorDto>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authControllerAccount>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof createApiInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthControllerAccountQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerAccount>>
  > = ({ signal }) => authControllerAccount(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authControllerAccount>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AuthControllerAccountQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerAccount>>
>;
export type AuthControllerAccountQueryError = ErrorType<ErrorDto>;

export const useAuthControllerAccount = <
  TData = Awaited<ReturnType<typeof authControllerAccount>>,
  TError = ErrorType<ErrorDto>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authControllerAccount>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAuthControllerAccountQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const authControllerLogout = (
  options?: SecondParameter<typeof createApiInstance>,
) => {
  return createApiInstance<void>(
    { url: `/api/auth/logout`, method: 'POST' },
    options,
  );
};

export const getAuthControllerLogoutMutationOptions = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogout>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogout>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogout>>,
    void
  > = () => {
    return authControllerLogout(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogout>>
>;

export type AuthControllerLogoutMutationError = ErrorType<ErrorDto>;

export const useAuthControllerLogout = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogout>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAuthControllerLogoutMutationOptions(options);

  return useMutation(mutationOptions);
};

export const authControllerRegister = (
  registerDto: BodyType<RegisterDto>,
  options?: SecondParameter<typeof createApiInstance>,
) => {
  return createApiInstance<void>(
    {
      url: `/api/auth/register`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: registerDto,
    },
    options,
  );
};

export const getAuthControllerRegisterMutationOptions = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegister>>,
    TError,
    { data: BodyType<RegisterDto> },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerRegister>>,
  TError,
  { data: BodyType<RegisterDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRegister>>,
    { data: BodyType<RegisterDto> }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerRegister(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRegister>>
>;
export type AuthControllerRegisterMutationBody = BodyType<RegisterDto>;
export type AuthControllerRegisterMutationError = ErrorType<ErrorDto>;

export const useAuthControllerRegister = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegister>>,
    TError,
    { data: BodyType<RegisterDto> },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerRegister>>,
  TError,
  { data: BodyType<RegisterDto> },
  TContext
> => {
  const mutationOptions = getAuthControllerRegisterMutationOptions(options);

  return useMutation(mutationOptions);
};

export const authControllerRegisterExisted = (
  registerExistedDto: BodyType<RegisterExistedDto>,
  options?: SecondParameter<typeof createApiInstance>,
) => {
  return createApiInstance<void>(
    {
      url: `/api/auth/register-existed`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: registerExistedDto,
    },
    options,
  );
};

export const getAuthControllerRegisterExistedMutationOptions = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegisterExisted>>,
    TError,
    { data: BodyType<RegisterExistedDto> },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerRegisterExisted>>,
  TError,
  { data: BodyType<RegisterExistedDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRegisterExisted>>,
    { data: BodyType<RegisterExistedDto> }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerRegisterExisted(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerRegisterExistedMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRegisterExisted>>
>;
export type AuthControllerRegisterExistedMutationBody =
  BodyType<RegisterExistedDto>;
export type AuthControllerRegisterExistedMutationError = ErrorType<ErrorDto>;

export const useAuthControllerRegisterExisted = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegisterExisted>>,
    TError,
    { data: BodyType<RegisterExistedDto> },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerRegisterExisted>>,
  TError,
  { data: BodyType<RegisterExistedDto> },
  TContext
> => {
  const mutationOptions =
    getAuthControllerRegisterExistedMutationOptions(options);

  return useMutation(mutationOptions);
};

export const authControllerHasAccount = (
  hasAccountDto: BodyType<HasAccountDto>,
  options?: SecondParameter<typeof createApiInstance>,
) => {
  return createApiInstance<ExistedAccountResponseDto>(
    {
      url: `/api/auth/account/exists`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: hasAccountDto,
    },
    options,
  );
};

export const getAuthControllerHasAccountMutationOptions = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerHasAccount>>,
    TError,
    { data: BodyType<HasAccountDto> },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerHasAccount>>,
  TError,
  { data: BodyType<HasAccountDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerHasAccount>>,
    { data: BodyType<HasAccountDto> }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerHasAccount(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerHasAccountMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerHasAccount>>
>;
export type AuthControllerHasAccountMutationBody = BodyType<HasAccountDto>;
export type AuthControllerHasAccountMutationError = ErrorType<ErrorDto>;

export const useAuthControllerHasAccount = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerHasAccount>>,
    TError,
    { data: BodyType<HasAccountDto> },
    TContext
  >;
  request?: SecondParameter<typeof createApiInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerHasAccount>>,
  TError,
  { data: BodyType<HasAccountDto> },
  TContext
> => {
  const mutationOptions = getAuthControllerHasAccountMutationOptions(options);

  return useMutation(mutationOptions);
};
